Grammar

    0 $accept: program $end

    1 program: block program
    2        | block

    3 block: fdecl '{' statements '}'

    4 fdecl: VOID VARIABLE '(' ')'

    5 statements: statement ';' statements
    6           | statement ';'

    7 statement: INT var_list
    8          | VARIABLE '=' NUMBER
    9          | VARIABLE '=' expr
   10          | PRINT '(' STRING pargs ')'
   11          | VARIABLE '(' ')'
   12          | expr
   13          | %empty

   14 pargs: ',' VARIABLE pargs
   15      | ',' NUMBER pargs
   16      | %empty

   17 expr: VARIABLE '+' expr
   18     | VARIABLE '-' expr
   19     | NUMBER '+' expr
   20     | NUMBER '-' expr
   21     | VARIABLE
   22     | VARIABLE '+' NUMBER
   23     | VARIABLE '-' NUMBER
   24     | NUMBER '+' NUMBER
   25     | NUMBER '-' NUMBER

   26 var_list: VARIABLE ',' var_list
   27         | VARIABLE


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 10 11
')' (41) 4 10 11
'+' (43) 17 19 22 24
',' (44) 14 15 26
'-' (45) 18 20 23 25
';' (59) 5 6
'=' (61) 8 9
'{' (123) 3
'}' (125) 3
error (256)
VARIABLE (258) 4 8 9 11 14 17 18 21 22 23 26 27
STRING (259) 10
NUMBER (260) 8 15 19 20 22 23 24 25
INT (261) 7
VOID (262) 4
PRINT (263) 10


Nonterminals, with rules where they appear

$accept (18)
    on left: 0
program (19)
    on left: 1 2, on right: 0 1
block (20)
    on left: 3, on right: 1 2
fdecl (21)
    on left: 4, on right: 3
statements (22)
    on left: 5 6, on right: 3 5
statement (23)
    on left: 7 8 9 10 11 12 13, on right: 5 6
pargs (24)
    on left: 14 15 16, on right: 10 14 15
expr (25)
    on left: 17 18 19 20 21 22 23 24 25, on right: 9 12 17 18 19 20
var_list (26)
    on left: 26 27, on right: 7 26


State 0

    0 $accept: . program $end

    VOID  shift, and go to state 1

    program  go to state 2
    block    go to state 3
    fdecl    go to state 4


State 1

    4 fdecl: VOID . VARIABLE '(' ')'

    VARIABLE  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: block . program
    2        | block .

    VOID  shift, and go to state 1

    $default  reduce using rule 2 (program)

    program  go to state 7
    block    go to state 3
    fdecl    go to state 4


State 4

    3 block: fdecl . '{' statements '}'

    '{'  shift, and go to state 8


State 5

    4 fdecl: VOID VARIABLE . '(' ')'

    '('  shift, and go to state 9


State 6

    0 $accept: program $end .

    $default  accept


State 7

    1 program: block program .

    $default  reduce using rule 1 (program)


State 8

    3 block: fdecl '{' . statements '}'

    VARIABLE  shift, and go to state 10
    NUMBER    shift, and go to state 11
    INT       shift, and go to state 12
    PRINT     shift, and go to state 13

    $default  reduce using rule 13 (statement)

    statements  go to state 14
    statement   go to state 15
    expr        go to state 16


State 9

    4 fdecl: VOID VARIABLE '(' . ')'

    ')'  shift, and go to state 17


State 10

    8 statement: VARIABLE . '=' NUMBER
    9          | VARIABLE . '=' expr
   11          | VARIABLE . '(' ')'
   17 expr: VARIABLE . '+' expr
   18     | VARIABLE . '-' expr
   21     | VARIABLE .
   22     | VARIABLE . '+' NUMBER
   23     | VARIABLE . '-' NUMBER

    '('  shift, and go to state 18
    '='  shift, and go to state 19
    '+'  shift, and go to state 20
    '-'  shift, and go to state 21

    $default  reduce using rule 21 (expr)


State 11

   19 expr: NUMBER . '+' expr
   20     | NUMBER . '-' expr
   24     | NUMBER . '+' NUMBER
   25     | NUMBER . '-' NUMBER

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23


State 12

    7 statement: INT . var_list

    VARIABLE  shift, and go to state 24

    var_list  go to state 25


State 13

   10 statement: PRINT . '(' STRING pargs ')'

    '('  shift, and go to state 26


State 14

    3 block: fdecl '{' statements . '}'

    '}'  shift, and go to state 27


State 15

    5 statements: statement . ';' statements
    6           | statement . ';'

    ';'  shift, and go to state 28


State 16

   12 statement: expr .

    $default  reduce using rule 12 (statement)


State 17

    4 fdecl: VOID VARIABLE '(' ')' .

    $default  reduce using rule 4 (fdecl)


State 18

   11 statement: VARIABLE '(' . ')'

    ')'  shift, and go to state 29


State 19

    8 statement: VARIABLE '=' . NUMBER
    9          | VARIABLE '=' . expr

    VARIABLE  shift, and go to state 30
    NUMBER    shift, and go to state 31

    expr  go to state 32


State 20

   17 expr: VARIABLE '+' . expr
   22     | VARIABLE '+' . NUMBER

    VARIABLE  shift, and go to state 30
    NUMBER    shift, and go to state 33

    expr  go to state 34


State 21

   18 expr: VARIABLE '-' . expr
   23     | VARIABLE '-' . NUMBER

    VARIABLE  shift, and go to state 30
    NUMBER    shift, and go to state 35

    expr  go to state 36


State 22

   19 expr: NUMBER '+' . expr
   24     | NUMBER '+' . NUMBER

    VARIABLE  shift, and go to state 30
    NUMBER    shift, and go to state 37

    expr  go to state 38


State 23

   20 expr: NUMBER '-' . expr
   25     | NUMBER '-' . NUMBER

    VARIABLE  shift, and go to state 30
    NUMBER    shift, and go to state 39

    expr  go to state 40


State 24

   26 var_list: VARIABLE . ',' var_list
   27         | VARIABLE .

    ','  shift, and go to state 41

    $default  reduce using rule 27 (var_list)


State 25

    7 statement: INT var_list .

    $default  reduce using rule 7 (statement)


State 26

   10 statement: PRINT '(' . STRING pargs ')'

    STRING  shift, and go to state 42


State 27

    3 block: fdecl '{' statements '}' .

    $default  reduce using rule 3 (block)


State 28

    5 statements: statement ';' . statements
    6           | statement ';' .

    VARIABLE  shift, and go to state 10
    NUMBER    shift, and go to state 11
    INT       shift, and go to state 12
    PRINT     shift, and go to state 13

    ';'       reduce using rule 13 (statement)
    $default  reduce using rule 6 (statements)

    statements  go to state 43
    statement   go to state 15
    expr        go to state 16


State 29

   11 statement: VARIABLE '(' ')' .

    $default  reduce using rule 11 (statement)


State 30

   17 expr: VARIABLE . '+' expr
   18     | VARIABLE . '-' expr
   21     | VARIABLE .
   22     | VARIABLE . '+' NUMBER
   23     | VARIABLE . '-' NUMBER

    '+'  shift, and go to state 20
    '-'  shift, and go to state 21

    $default  reduce using rule 21 (expr)


State 31

    8 statement: VARIABLE '=' NUMBER .
   19 expr: NUMBER . '+' expr
   20     | NUMBER . '-' expr
   24     | NUMBER . '+' NUMBER
   25     | NUMBER . '-' NUMBER

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23

    $default  reduce using rule 8 (statement)


State 32

    9 statement: VARIABLE '=' expr .

    $default  reduce using rule 9 (statement)


State 33

   19 expr: NUMBER . '+' expr
   20     | NUMBER . '-' expr
   22     | VARIABLE '+' NUMBER .
   24     | NUMBER . '+' NUMBER
   25     | NUMBER . '-' NUMBER

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23

    $default  reduce using rule 22 (expr)


State 34

   17 expr: VARIABLE '+' expr .

    $default  reduce using rule 17 (expr)


State 35

   19 expr: NUMBER . '+' expr
   20     | NUMBER . '-' expr
   23     | VARIABLE '-' NUMBER .
   24     | NUMBER . '+' NUMBER
   25     | NUMBER . '-' NUMBER

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23

    $default  reduce using rule 23 (expr)


State 36

   18 expr: VARIABLE '-' expr .

    $default  reduce using rule 18 (expr)


State 37

   19 expr: NUMBER . '+' expr
   20     | NUMBER . '-' expr
   24     | NUMBER . '+' NUMBER
   24     | NUMBER '+' NUMBER .
   25     | NUMBER . '-' NUMBER

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23

    $default  reduce using rule 24 (expr)


State 38

   19 expr: NUMBER '+' expr .

    $default  reduce using rule 19 (expr)


State 39

   19 expr: NUMBER . '+' expr
   20     | NUMBER . '-' expr
   24     | NUMBER . '+' NUMBER
   25     | NUMBER . '-' NUMBER
   25     | NUMBER '-' NUMBER .

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23

    $default  reduce using rule 25 (expr)


State 40

   20 expr: NUMBER '-' expr .

    $default  reduce using rule 20 (expr)


State 41

   26 var_list: VARIABLE ',' . var_list

    VARIABLE  shift, and go to state 24

    var_list  go to state 44


State 42

   10 statement: PRINT '(' STRING . pargs ')'

    ','  shift, and go to state 45

    $default  reduce using rule 16 (pargs)

    pargs  go to state 46


State 43

    5 statements: statement ';' statements .

    $default  reduce using rule 5 (statements)


State 44

   26 var_list: VARIABLE ',' var_list .

    $default  reduce using rule 26 (var_list)


State 45

   14 pargs: ',' . VARIABLE pargs
   15      | ',' . NUMBER pargs

    VARIABLE  shift, and go to state 47
    NUMBER    shift, and go to state 48


State 46

   10 statement: PRINT '(' STRING pargs . ')'

    ')'  shift, and go to state 49


State 47

   14 pargs: ',' VARIABLE . pargs

    ','  shift, and go to state 45

    $default  reduce using rule 16 (pargs)

    pargs  go to state 50


State 48

   15 pargs: ',' NUMBER . pargs

    ','  shift, and go to state 45

    $default  reduce using rule 16 (pargs)

    pargs  go to state 51


State 49

   10 statement: PRINT '(' STRING pargs ')' .

    $default  reduce using rule 10 (statement)


State 50

   14 pargs: ',' VARIABLE pargs .

    $default  reduce using rule 14 (pargs)


State 51

   15 pargs: ',' NUMBER pargs .

    $default  reduce using rule 15 (pargs)
